// Code generated by https://github.com/selefra/selefra-terraform-provider-scaffolding DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***
package resources

{{if .TableSlice}}
import (
	"context"
	"github.com/selefra/selefra-provider-sdk/provider/schema"
	"github.com/selefra/selefra-provider-sdk/table_schema_generator"
    "github.com/selefra/selefra-provider-sdk/terraform/bridge"{{range $key, $value := .ImportSet}}
    "{{$key}}" {{end}}
)
{{end}}

{{range $index, $table := .TableSlice}}

// {{$table.TableName}}
func TableSchemaGenerator_{{$table.TableName}}() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_{{$table.TableName}}().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_{{$table.TableName}}()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// {{$table.TableName}}
func GetColumns_{{$table.TableName}}() []*schema.Column {
    return []*schema.Column{ {{range $index, $column := $table.ColumnSchemaSlice}}
        table_schema_generator.NewColumnBuilder().ColumnName("{{$column.ColumnName}}").ColumnType({{$column.ColumnTypeCodeString}}){{if $column.Options.Unique}}.SetUnique(){{end}}{{if $column.Options.NotNull}}.SetNotNull(){{end}}{{if $column.Description}}.Description({{$column.Description}}){{end}}{{if $column.ExtractorInlineCodeString}}.
        Extractor({{$column.ExtractorInlineCodeString}}){{end}}.Build(), {{end}}
    }
}

{{end}}
